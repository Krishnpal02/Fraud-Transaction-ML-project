# -*- coding: utf-8 -*-
"""Fraud Transaction Detection .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1S0_hPgCviRqztRNx0sU1WtbOC05IjlK5
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

#loading the dataset to the Pandas DataFrame
df =pd.read_csv('/content/creditcard.csv')

#first 5 row of the dataset
df.head(5)

df.tail()

#dataset Information
df.info()

#checking the number of the missing value in each column
df.isnull().sum()

# distribution of legit transtion and fraudlent transcation
df['Class'].value_counts()

"""This Dataset is highly unbalanced

0 -> Normal Transaction
1-> Fraudlent Transaction
"""

# separating the data for analysis
legit = df[df.Class ==0]
fraud =df[df.Class ==1]

print(legit.shape)
print(fraud.shape)

#statistical measure of the data
legit.Amount.describe()

fraud.Amount.describe()

# compare the value for both transations
df.groupby('Class').mean()

"""Under-Sampling

Build a sample dataset containing similar distribution of normal transaction and Fraudulent Transactions

Number of Fraudlent Transaction -> 492
"""

legit_sample = legit.sample(n = 153)

"""Concatenating two DataFrames"""

new_dataset =pd.concat([legit_sample , fraud], axis =0)

new_dataset.head()

new_dataset.tail()

new_dataset['Class'].value_counts()

new_dataset.groupby('Class').mean()

"""Splitting the data into Feature and Targets"""

X = new_dataset.drop(columns='Class' ,axis=1)
Y = new_dataset['Class']

print(X)

print(Y)

"""Split the data into Training data and Testing Data"""

X_train , X_test , Y_train ,Y_test = train_test_split(X ,Y, test_size=0.2 , stratify=Y , random_state=2)

print(X.shape , X_train.shape , X_test.shape)

"""Model Training

Logistic Regression
"""

model = LogisticRegression()

# train the Logistic Regression Model with Training Data
model.fit(X_train , Y_train )

"""Model Evaluation

Accuracy Score
"""

# accuracy on training data
X_train_prediction = model.predict(X_train )
training_data_accuracy =accuracy_score(X_train_prediction , Y_train)

print('Accuracy on training data : ', training_data_accuracy)

# accuracy on test data
X_test_prediction = model.predict(X_test )
test_data_accuracy =accuracy_score(X_test_prediction , Y_test)

print('Accuracy on test data : ', test_data_accuracy)

